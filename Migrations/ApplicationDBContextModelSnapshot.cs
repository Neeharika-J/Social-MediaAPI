// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SMApi.dbcontext;

#nullable disable

namespace SMApi.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    partial class ApplicationDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SMApi.Models.Comments", b =>
                {
                    b.Property<int>("commentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("commentId"));

                    b.Property<string>("commentText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("postId")
                        .HasColumnType("int");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("commentId");

                    b.HasIndex("postId");

                    b.HasIndex("userId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("SMApi.Models.LikeComments", b =>
                {
                    b.Property<int>("likeCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("likeCommentId"));

                    b.Property<int>("commentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("likeCommentId");

                    b.HasIndex("commentId");

                    b.HasIndex("userId");

                    b.ToTable("LikeComments");
                });

            modelBuilder.Entity("SMApi.Models.LikePosts", b =>
                {
                    b.Property<int>("likePostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("likePostId"));

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("postId")
                        .HasColumnType("int");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("likePostId");

                    b.HasIndex("postId");

                    b.HasIndex("userId");

                    b.ToTable("LikePosts");
                });

            modelBuilder.Entity("SMApi.Models.Posts", b =>
                {
                    b.Property<int>("postId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("postId"));

                    b.Property<string>("content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("postId");

                    b.HasIndex("userId");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("SMApi.Models.SMUser", b =>
                {
                    b.Property<int>("userId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("userId"));

                    b.Property<int>("age")
                        .HasColumnType("int");

                    b.Property<string>("dob")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("registerDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("userId");

                    b.HasIndex("email")
                        .IsUnique();

                    b.ToTable("SMUser");
                });

            modelBuilder.Entity("SMApi.Models.UserSecurity", b =>
                {
                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.Property<string>("password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("tokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("verificationToken")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("userId");

                    b.ToTable("UserSecurity");
                });

            modelBuilder.Entity("SMApi.Models.Comments", b =>
                {
                    b.HasOne("SMApi.Models.Posts", "post")
                        .WithMany("comments")
                        .HasForeignKey("postId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SMApi.Models.SMUser", "smusers")
                        .WithMany("comments")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("post");

                    b.Navigation("smusers");
                });

            modelBuilder.Entity("SMApi.Models.LikeComments", b =>
                {
                    b.HasOne("SMApi.Models.Comments", "comments")
                        .WithMany("likeComments")
                        .HasForeignKey("commentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SMApi.Models.SMUser", "sMUsers")
                        .WithMany("likeComments")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("comments");

                    b.Navigation("sMUsers");
                });

            modelBuilder.Entity("SMApi.Models.LikePosts", b =>
                {
                    b.HasOne("SMApi.Models.Posts", "posts")
                        .WithMany("likePosts")
                        .HasForeignKey("postId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SMApi.Models.SMUser", "sMUsers")
                        .WithMany("likePosts")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("posts");

                    b.Navigation("sMUsers");
                });

            modelBuilder.Entity("SMApi.Models.Posts", b =>
                {
                    b.HasOne("SMApi.Models.SMUser", "sMUsers")
                        .WithMany("posts")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("sMUsers");
                });

            modelBuilder.Entity("SMApi.Models.UserSecurity", b =>
                {
                    b.HasOne("SMApi.Models.SMUser", "sMUser")
                        .WithOne("userSecurity")
                        .HasForeignKey("SMApi.Models.UserSecurity", "userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("sMUser");
                });

            modelBuilder.Entity("SMApi.Models.Comments", b =>
                {
                    b.Navigation("likeComments");
                });

            modelBuilder.Entity("SMApi.Models.Posts", b =>
                {
                    b.Navigation("comments");

                    b.Navigation("likePosts");
                });

            modelBuilder.Entity("SMApi.Models.SMUser", b =>
                {
                    b.Navigation("comments");

                    b.Navigation("likeComments");

                    b.Navigation("likePosts");

                    b.Navigation("posts");

                    b.Navigation("userSecurity");
                });
#pragma warning restore 612, 618
        }
    }
}
